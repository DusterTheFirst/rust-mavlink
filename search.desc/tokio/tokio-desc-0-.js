searchState.loadedDescShard("tokio", 0, "A runtime for writing reliable network applications …\nTraits, helpers, and type definitions for asynchronous I/O …\nTCP/UDP/Unix bindings for <code>tokio</code>.\nPins a value on the stack.\nDue to the <code>Stream</code> trait’s inclusion in <code>std</code> landing later …\nAsynchronous green-threads.\nReads bytes asynchronously.\nAn extension trait which adds utility methods to …\nReads bytes from a source.\nReads bytes from a source.\nSeek bytes asynchronously.\nAn extension trait that adds utility methods to <code>AsyncSeek</code> …\nWrites bytes asynchronously.\nWrites bytes to a sink.\nThe <code>BufReader</code> struct adds buffering to any reader.\nWraps a type that is <code>AsyncWrite</code> and <code>AsyncRead</code>, and buffers …\nWraps a writer and buffers its output.\nA bidirectional pipe to read and write bytes in memory.\n<code>Empty</code> ignores any data written via <code>AsyncWrite</code>, and will …\nJoins two values implementing <code>AsyncRead</code> and <code>AsyncWrite</code> …\nReads lines from an <code>AsyncBufRead</code>.\nA wrapper around a byte buffer that is incrementally …\nThe readable half of a value returned from <code>split</code>.\nAn async reader which yields one byte over and over and …\nA unidirectional pipe to read and write bytes in memory.\nAn async writer which will move data into the void.\nSplitter for the <code>split</code> method.\nStream for the <code>take</code> method.\nThe writable half of a value returned from <code>split</code>.\nAdvances the size of the filled region of the buffer.\nAsserts that the first <code>n</code> unfilled bytes of the buffer are …\nReturns a reference to the internally buffered data.\nReturns a reference to the internally buffered data.\nReturns the total capacity of the buffer.\nCreates a new <code>AsyncRead</code> instance that chains this stream …\nCreates a new <code>AsyncRead</code> instance that chains this stream …\nClears the buffer, resetting the filled region to empty.\nTells this buffer that <code>amt</code> bytes have been consumed from …\nTells this buffer that <code>amt</code> bytes have been consumed from …\nTells this buffer that <code>amt</code> bytes have been consumed from …\nAsynchronously copies the entire contents of a reader into …\nCopies data in both directions between <code>a</code> and <code>b</code>.\nCopies data in both directions between <code>a</code> and <code>b</code> using …\nAsynchronously copies the entire contents of a reader into …\nCreate a new pair of <code>DuplexStream</code>s that act like a pair of …\nCreates a value that is always at EOF for reads, and …\nReturns the contents of the internal buffer, filling it …\nReturns the contents of the internal buffer, filling it …\nReturns a shared reference to the filled portion of the …\nReturns a mutable reference to the filled portion of the …\nFlushes this output stream, ensuring that all …\nFlushes this output stream, ensuring that all …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a mutable reference to the underlying reader.\nObtains a mutable reference to the underlying reader.\nGets a mutable reference to the underlying writer.\nGets a mutable reference to the underlying I/O object.\nGets a mutable reference to the underlying reader.\nGets a pinned mutable reference to the underlying reader.\nGets a pinned mutable reference to the underlying writer.\nGets a pinned mutable reference to the underlying I/O …\nGets a pinned mutable reference to the underlying reader.\nGets a reference to the underlying reader.\nObtains a reference to the underlying reader.\nGets a reference to the underlying writer.\nGets a reference to the underlying I/O object.\nGets a reference to the underlying reader.\nReturns a mutable reference to the unfilled part of the …\nReturns a mutable reference to the first <code>n</code> bytes of the …\nReturns a shared reference to the initialized portion of …\nReturns a mutable reference to the initialized portion of …\nReturns a mutable reference to the entire buffer, without …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSplits this <code>Join</code> back into its <code>AsyncRead</code> and <code>AsyncWrite</code> …\nConsumes the <code>Take</code>, returning the wrapped reader.\nUnwraps this <code>Lines&lt;R&gt;</code>, returning the underlying reader.\nConsumes this <code>BufWriter</code>, returning the underlying writer.\nConsumes this <code>BufStream</code>, returning the underlying I/O …\nConsumes this <code>BufReader</code>, returning the underlying reader.\nChecks if this <code>ReadHalf</code> and some <code>WriteHalf</code> were split from …\nChecks if this <code>WriteHalf</code> and some <code>ReadHalf</code> were split from …\nDetermines if this writer has an efficient …\nDetermines if this writer has an efficient …\nJoin two values implementing <code>AsyncRead</code> and <code>AsyncWrite</code> into …\nReturns the remaining number of bytes that can be read …\nReturns a stream over the lines of this reader. This …\nReturns a stream over the lines of this reader. This …\nCreates a new <code>ReadBuf</code> from a fully initialized buffer.\nCreates a new <code>BufWriter</code> with a default buffer capacity. …\nWraps a type in both <code>BufWriter</code> and <code>BufReader</code>.\nCreates a new <code>BufReader</code> with a default buffer capacity. …\nCreates unidirectional buffer that acts like in memory …\nReturns the next line in the stream.\nReturns the next segment in the stream.\nWaits for a seek operation to complete.\nAttempts to return the contents of the internal buffer, …\nAttempts to flush the object, ensuring that any buffered …\nPolls for the next line in the stream.\nPolls for the next segment in the stream.\nAttempts to read from the <code>AsyncRead</code> into <code>buf</code>.\nInitiates or attempts to shut down this writer, returning …\nAttempt to write bytes from <code>buf</code> into the object.\nLike <code>poll_write</code>, except that it writes from a slice of …\nLike <code>poll_write</code>, except that it writes from a slice of …\nAppends data to the buffer, advancing the written position …\nPulls some bytes from this source into the specified …\nPulls some bytes from this source into the specified …\nPulls some bytes from this source into the specified …\nPulls some bytes from this source into the specified …\nReads the exact number of bytes required to fill <code>buf</code>.\nReads the exact number of bytes required to fill <code>buf</code>.\nReads an 32-bit floating point type in big-endian order …\nReads an 32-bit floating point type in big-endian order …\nReads an 32-bit floating point type in little-endian order …\nReads an 32-bit floating point type in little-endian order …\nReads an 64-bit floating point type in big-endian order …\nReads an 64-bit floating point type in big-endian order …\nReads an 64-bit floating point type in little-endian order …\nReads an 64-bit floating point type in little-endian order …\nReads an signed 128-bit integer in big-endian order from …\nReads an signed 128-bit integer in big-endian order from …\nReads an signed 128-bit integer in little-endian order …\nReads an signed 128-bit integer in little-endian order …\nReads a signed 16-bit integer in big-endian order from the …\nReads a signed 16-bit integer in big-endian order from the …\nReads a signed 16-bit integer in little-endian order from …\nReads a signed 16-bit integer in little-endian order from …\nReads a signed 32-bit integer in big-endian order from the …\nReads a signed 32-bit integer in big-endian order from the …\nReads a signed 32-bit integer in little-endian order from …\nReads a signed 32-bit integer in little-endian order from …\nReads an signed 64-bit integer in big-endian order from the\nReads an signed 64-bit integer in big-endian order from the\nReads an signed 64-bit integer in little-endian order from …\nReads an signed 64-bit integer in little-endian order from …\nReads a signed 8 bit integer from the underlying reader.\nReads a signed 8 bit integer from the underlying reader.\nReads all bytes until a newline (the 0xA byte) is reached, …\nReads all bytes until a newline (the 0xA byte) is reached, …\nReads all bytes until EOF in this source, placing them …\nReads all bytes until EOF in this source, placing them …\nReads all bytes until EOF in this source, appending them …\nReads all bytes until EOF in this source, appending them …\nReads an unsigned 128-bit integer in big-endian order from …\nReads an unsigned 128-bit integer in big-endian order from …\nReads an unsigned 128-bit integer in little-endian order …\nReads an unsigned 128-bit integer in little-endian order …\nReads an unsigned 16-bit integer in big-endian order from …\nReads an unsigned 16-bit integer in big-endian order from …\nReads an unsigned 16-bit integer in little-endian order …\nReads an unsigned 16-bit integer in little-endian order …\nReads an unsigned 32-bit integer in big-endian order from …\nReads an unsigned 32-bit integer in big-endian order from …\nReads an unsigned 32-bit integer in little-endian order …\nReads an unsigned 32-bit integer in little-endian order …\nReads an unsigned 64-bit integer in big-endian order from …\nReads an unsigned 64-bit integer in big-endian order from …\nReads an unsigned 64-bit integer in little-endian order …\nReads an unsigned 64-bit integer in little-endian order …\nReads an unsigned 8 bit integer from the underlying reader.\nReads an unsigned 8 bit integer from the underlying reader.\nReads all bytes into <code>buf</code> until the delimiter <code>byte</code> or EOF …\nReads all bytes into <code>buf</code> until the delimiter <code>byte</code> or EOF …\nReturns a reference to the inner reader.\nReturns a mutable reference to the inner reader.\nReturns a pinned mutable reference to the inner reader.\nReturns the number of bytes at the end of the slice that …\nCreates an instance of an async reader that infinitely …\nCreates a future which will rewind to the beginning of the …\nCreates a future which will rewind to the beginning of the …\nCreates a future which will seek an IO object, and then …\nCreates a future which will seek an IO object, and then …\nSets the size of the filled region of the buffer.\nSets the number of bytes that can be read before this …\nShuts down the output stream, ensuring that the value can …\nShuts down the output stream, ensuring that the value can …\nCreates unidirectional buffer that acts like in memory …\nCreates an instance of an async writer which will …\nSplits a single value implementing <code>AsyncRead + AsyncWrite</code> …\nReturns a stream of the contents of this reader split on …\nReturns a stream of the contents of this reader split on …\nAttempts to seek to an offset, in bytes, in a stream.\nCreates a future which will return the current seek …\nCreates a future which will return the current seek …\nReturns a new <code>ReadBuf</code> comprised of the unfilled section up …\nCreates an adaptor which reads at most <code>limit</code> bytes from it.\nCreates an adaptor which reads at most <code>limit</code> bytes from it.\nReturns a mutable reference to the unfilled part of the …\nCreates a new <code>ReadBuf</code> from a fully uninitialized buffer.\nReunites with a previously split <code>WriteHalf</code>.\nCreates a new <code>BufWriter</code> with the specified buffer capacity.\nCreates a <code>BufStream</code> with the specified <code>BufReader</code> capacity …\nCreates a new <code>BufReader</code> with the specified buffer capacity.\nWrites a buffer into this writer, returning how many bytes …\nWrites a buffer into this writer, returning how many bytes …\nAttempts to write an entire buffer into this writer.\nAttempts to write an entire buffer into this writer.\nAttempts to write an entire buffer into this writer.\nAttempts to write an entire buffer into this writer.\nWrites a buffer into this writer, advancing the buffer’s …\nWrites a buffer into this writer, advancing the buffer’s …\nWrites an 32-bit floating point type in big-endian order …\nWrites an 32-bit floating point type in big-endian order …\nWrites an 32-bit floating point type in little-endian …\nWrites an 32-bit floating point type in little-endian …\nWrites an 64-bit floating point type in big-endian order …\nWrites an 64-bit floating point type in big-endian order …\nWrites an 64-bit floating point type in little-endian …\nWrites an 64-bit floating point type in little-endian …\nWrites an signed 128-bit integer in big-endian order to the\nWrites an signed 128-bit integer in big-endian order to the\nWrites an signed 128-bit integer in little-endian order to …\nWrites an signed 128-bit integer in little-endian order to …\nWrites a signed 16-bit integer in big-endian order to the …\nWrites a signed 16-bit integer in big-endian order to the …\nWrites a signed 16-bit integer in little-endian order to …\nWrites a signed 16-bit integer in little-endian order to …\nWrites a signed 32-bit integer in big-endian order to the …\nWrites a signed 32-bit integer in big-endian order to the …\nWrites a signed 32-bit integer in little-endian order to …\nWrites a signed 32-bit integer in little-endian order to …\nWrites an signed 64-bit integer in big-endian order to the …\nWrites an signed 64-bit integer in big-endian order to the …\nWrites an signed 64-bit integer in little-endian order to …\nWrites an signed 64-bit integer in little-endian order to …\nWrites a signed 8-bit integer to the underlying writer.\nWrites a signed 8-bit integer to the underlying writer.\nWrites an unsigned 128-bit integer in big-endian order to …\nWrites an unsigned 128-bit integer in big-endian order to …\nWrites an unsigned 128-bit integer in little-endian order …\nWrites an unsigned 128-bit integer in little-endian order …\nWrites an unsigned 16-bit integer in big-endian order to …\nWrites an unsigned 16-bit integer in big-endian order to …\nWrites an unsigned 16-bit integer in little-endian order …\nWrites an unsigned 16-bit integer in little-endian order …\nWrites an unsigned 32-bit integer in big-endian order to …\nWrites an unsigned 32-bit integer in big-endian order to …\nWrites an unsigned 32-bit integer in little-endian order …\nWrites an unsigned 32-bit integer in little-endian order …\nWrites an unsigned 64-bit integer in big-endian order to …\nWrites an unsigned 64-bit integer in big-endian order to …\nWrites an unsigned 64-bit integer in little-endian order …\nWrites an unsigned 64-bit integer in little-endian order …\nWrites an unsigned 8-bit integer to the underlying writer.\nWrites an unsigned 8-bit integer to the underlying writer.\nLike <code>write</code>, except that it writes from a slice of buffers.\nLike <code>write</code>, except that it writes from a slice of buffers.\nReturns a reference to the inner writer.\nReturns a mutable reference to the inner writer.\nReturns a pinned mutable reference to the inner writer.\nConverts or resolves without blocking to one or more …")